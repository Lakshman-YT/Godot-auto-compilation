name: Build Export Templates (Single Job)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_templates:
    runs-on: ubuntu-latest
    env:
      SCONSFLAGS: verbose=yes warnings=all use_lto=yes
      SCRIPT_AES256_ENCRYPTION_KEY: ${{ secrets.SCRIPT_AES256_ENCRYPTION_KEY }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Clone latest stable Godot source into ./godot
        run: |
          curl -s https://api.github.com/repos/godotengine/godot/releases/latest \
            | grep "tag_name" | cut -d '"' -f4 | xargs -I {} git clone --depth 1 --branch {} https://github.com/godotengine/godot.git godot

      - name: Download AES-256 secure script
        run: |
          curl -L -o aes_secure.py "https://raw.githubusercontent.com/KnifeXRage/Godot-Secure/main/Godot%20Secure%20AES-256.py"

      - name: Patch AES script for non-interactive use
        run: |
          sed -i 's/confirm = input(.*/confirm = "yes"/' aes_secure.py
          sed -i '/exit(/d' aes_secure.py

      - name: Run AES-256 secure script (non-interactive)
        run: |
          python3 aes_secure.py ./godot || true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential scons pkg-config python3 \
               mingw-w64 clang zip unzip curl git cmake
          sudo update-alternatives --install /usr/bin/x86_64-w64-mingw32-g++ \
            x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 100
          sudo update-alternatives --install /usr/bin/x86_64-w64-mingw32-gcc \
            x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix 100
          sudo update-alternatives --set x86_64-w64-mingw32-g++ \
            /usr/bin/x86_64-w64-mingw32-g++-posix
          sudo update-alternatives --set x86_64-w64-mingw32-gcc \
            /usr/bin/x86_64-w64-mingw32-gcc-posix

      - name: Cache SCons build artifacts
        uses: actions/cache@v3
        with:
          path: |
            godot/.sconsign.dblite
            godot/bin/
          key: ${{ runner.os }}-godot-${{ hashFiles('godot/**/*.cpp', 'godot/**/*.h', 'godot/SConstruct', 'godot/SCsub') }}
          restore-keys: |
            ${{ runner.os }}-godot-

      - name: Build export templates (Linux)
        run: |
          cd godot
          scons platform=linuxbsd target=template_release tools=no
          cd ..

      - name: Build export templates (Windows)
        run: |
          cd godot
          scons platform=windows target=template_release arch=x86_64 tools=no
          scons platform=windows target=editor arch=x86_64 tools=yes
          cd ..

      - name: Package Linux build
        run: |
          mkdir -p templates_linux
          cp godot/bin/*linuxbsd* templates_linux/
          (cd templates_linux && zip -9 -r ../export_templates_linux.zip .)

      - name: Package Windows build
        run: |
          mkdir -p templates_windows
          cp godot/bin/*windows* templates_windows/
          (cd templates_windows && zip -9 -r ../export_templates_windows.zip .)

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-templates
          path: export_templates_linux.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-templates
          path: export_templates_windows.zip
